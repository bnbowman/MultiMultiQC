#! /usr/bin/env python

import sys
import subprocess
import argparse
import logging
import distutils.spawn
import os
import os.path as op

logging.basicConfig(level=logging.INFO,
                    format='[%(levelname)-7s] %(module)15s : %(message)s')
logger = logging.getLogger(__name__)


def _is_exe(fpath):
    """
    Check whether a purported EXE exists and is executable
    """
    return op.isfile(fpath) and os.access(fpath, os.X_OK)


def _get_multiqc_arg(multiqc):
    """
    Find the path to, and check the validity of, the MultiQC exe to be used
    """
    if multiqc is None:
        multiqc = distutils.spawn.find_executable("multiqc")

    if multiqc is None:
        raise ValueError("No valid MultiQC executable found in PATH!")

    if not _is_exe(multiqc):
        raise ValueError(
            "Supplied MultiQC executable isn't valid ('{}')".format(multiqc))

    return multiqc


def _get_output_dir(input_dir, suffix, outdir):
    """
    Format
    """
    if input_dir.endswith("/"):
        input_dir = input_dir[:-1]
    if "/" in input_dir:
        input_dir = input_dir.split("/")[-1]
    input_dir += "_" + suffix
    if outdir is None:
        return input_dir

    return op.join(outdir, input_dir)


def _get_subprocess_args(input_arg, outdir_arg, force, multiqc_arg):
    """
    Combine our formatted arguments into a command-line to execute as a subprocess
    """
    args = [multiqc_arg]

    if force:
        args.append("--force")
    args += ["--outdir", outdir_arg]
    args.append(input_arg)

    return args


def run(inputs, force, outdir, suffix, multiqc):
    """
    Execute MultiQC over a range of inputs
    """
    multiqc_arg = _get_multiqc_arg(multiqc)
    logger.info(
        "Using the MultiQC executable located at '{}'".format(multiqc_arg))
    for input_arg in inputs:
        logger.info("Setting up MultiQC execution for '{}'".format(input_arg))
        outdir_arg = _get_output_dir(input_arg, suffix, outdir)
        args = _get_subprocess_args(input_arg, outdir_arg, force, multiqc_arg)
        logger.info(
            "Executing MultiQC with the following command '{}'".format(" ".join(args)))
        subprocess.call(args)


def _parse_args():
    """
    Parse arguments from a command-line call with Python's ArgParse module
    """
    parser = argparse.ArgumentParser(
        description="Multi-MultiQC executable for command-line usage. "
        "Applies the input arguments to sequential executions of MultiQC "
        "allowing for independent HTML reports to be generated simulaneously, "
        "e.g. for individual samples from a multiplexed sequencing/analysis pipeline.")
    parser.add_argument('inputs', metavar='INPUT', nargs='+',
                        help='Files or directories to be passed to MultiQC as input')
    parser.add_argument('-f', '--force', action="store_true",
                        help="Overwrite any existing reports")
    parser.add_argument('-o', '--outdir',
                        help="Create reports in the specified output directory")
    parser.add_argument('-s', '--suffix',
                        default="multiqc",
                        help='Suffix to append to input (default="multiqc")')
    parser.add_argument('-m', '--multiqc',
                        help="Specify which MultiQC executable to use, if it's not in PATH",
                        default=None)
    return parser.parse_args()


if __name__ == "__main__":
    """
    Detect whether we've been called as a command-line utility
    """
    args = _parse_args()
    run(args.inputs, args.force, args.outdir, args.suffix, args.multiqc)
